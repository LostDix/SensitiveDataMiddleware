import logging, re
from typing import Callable, Dict, Any, Awaitable
from aiogram import BaseMiddleware
from aiogram.types import Update, Message
from aiogram.enums import ChatType

logger = logging.getLogger(__name__)


class SensitiveDataMiddleware(BaseMiddleware):
    def __init__(self, bot):
        self.bot = bot
        super().__init__()
        logger.info("Initialized SensitiveDataMiddleware")

    async def __call__(
            self,
            handler: Callable[[Update, Dict[str, Any]], Awaitable[Any]],
            event: Update,
            data: Dict[str, Any]
    ) -> Any:
        try:
            message = event.message or event.edited_message
            if not message:
                return await handler(event, data)

            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–ª—É–∂–µ–±–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            if self._is_service_message(message):
                return await handler(event, data)

            if message.chat.type not in [ChatType.GROUP, ChatType.SUPERGROUP]:
                return await handler(event, data)

            text = message.text or message.caption
            if not text:
                return await handler(event, data)

            # –ò—â–µ–º —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            sensitive_data = self._find_sensitive_data(text)
            if not sensitive_data:
                return await handler(event, data)

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º reply_to_message
            reply_to_message_id = message.reply_to_message.message_id if message.reply_to_message else None

            try:
                await message.delete()
                logger.info(f"Deleted message with sensitive data in chat {message.chat.id}")
            except Exception as e:
                logger.error(f"Failed to delete message: {e}")
                return await handler(event, data)

            user_mention = message.from_user.mention_html() if message.from_user else "–ê–Ω–æ–Ω–∏–º"

            # –ó–∞–º–µ–Ω—è–µ–º —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–∞ ***
            filtered_text = self._mask_sensitive_data(text)

            await self.bot.send_message(
                chat_id=message.chat.id,
                text=f"üîí {user_mention} –æ—Ç–ø—Ä–∞–≤–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ (–±—É–¥—å—Ç–µ –æ—Å—Ç–æ—Ä–æ–∂–Ω–µ–µ):\n{filtered_text}",
                parse_mode="HTML",
                reply_to_message_id=reply_to_message_id
            )

            return None

        except Exception as e:
            logger.exception(f"Error in SensitiveDataMiddleware: {e}")
            return await handler(event, data)

    def _is_service_message(self, message: Message) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–ª—É–∂–µ–±–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        if not message.from_user:
            return True
        if message.from_user.id == 777000:
            return True
        if message.new_chat_members or message.left_chat_member or message.pinned_message:
            return True
        return False

    def _find_sensitive_data(self, text: str) -> list:
        """–ù–∞—Ö–æ–¥–∏—Ç –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ç–µ–∫—Å—Ç–µ"""
        # –ù–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤ (–†–æ—Å—Å–∏—è, –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–µ)
        phones = re.findall(r'(?:\+|\b)[\d\(\)\- ]{7,}\d', text)

        # –ù–æ–º–µ—Ä–∞ –±–∞–Ω–∫–æ–≤—Å–∫–∏—Ö –∫–∞—Ä—Ç (16-19 —Ü–∏—Ñ—Ä, –≤–æ–∑–º–æ–∂–Ω–æ —Å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è–º–∏)
        cards = re.findall(r'\b(?:\d[ \-]?){15,18}\d\b', text)

        # –≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–µ –∫–æ—à–µ–ª—å–∫–∏ (QIWI, –Ø–Ω–¥–µ–∫—Å.–î–µ–Ω—å–≥–∏ –∏ —Ç.–¥.)
        wallets = re.findall(r'\b(?:\d{11,16}|[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,})\b', text)

        # –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω—ã–µ –∫–æ—à–µ–ª—å–∫–∏
        crypto = re.findall(
            r'\b(?:'
            r'0x[a-fA-F0-9]{40}|'  # Ethereum –∏ –ø–æ–¥–æ–±–Ω—ã–µ (0x...)
            r'[13][a-km-zA-HJ-NP-Z1-9]{25,34}|'  # Bitcoin
            r'[LM3][a-km-zA-HJ-NP-Z1-9]{26,33}|'  # Litecoin
            r'D{1}[5-9A-HJ-NP-U]{1}[1-9A-HJ-NP-Za-km-z]{32}|'  # Dogecoin
            r'[Xx][0-9A-Za-z]{33}|'  # Monero
            r'[A-Za-z0-9]{35,44}'  # –û–±—â–∏–π —à–∞–±–ª–æ–Ω –¥–ª—è –¥—Ä—É–≥–∏—Ö –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç
            r')\b',
            text
        )

        return phones + cards + wallets + crypto

    def _mask_sensitive_data(self, text: str) -> str:
        """–ó–∞–º–µ–Ω—è–µ—Ç –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–∞ ***"""
        # –ú–∞—Å–∫–∏—Ä—É–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω—ã
        text = re.sub(r'(?:\+|\b)([\d\(\)\- ]{7,}\d)',
                      lambda m: m.group(1)[:3] + '*' * (len(m.group(1)) - 3), text)

        # –ú–∞—Å–∫–∏—Ä—É–µ–º –∫–∞—Ä—Ç—ã (–æ—Å—Ç–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—ã–µ 4 –∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 4 —Ü–∏—Ñ—Ä—ã)
        text = re.sub(r'\b(?:\d[ \-]?){15,18}\d\b',
                      lambda m: m.group(0)[:4] + '*' * (len(m.group(0)) - 8) + m.group(0)[-4:], text)

        # –ú–∞—Å–∫–∏—Ä—É–µ–º —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–µ –∫–æ—à–µ–ª—å–∫–∏
        text = re.sub(r'\b(?:\d{11,16}|[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,})\b',
                      lambda m: m.group(0)[:3] + '*' * (len(m.group(0)) - 3), text)

        # –ú–∞—Å–∫–∏—Ä—É–µ–º –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω—ã–µ –∫–æ—à–µ–ª—å–∫–∏ (–æ—Å—Ç–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—ã–µ –∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 4 —Å–∏–º–≤–æ–ª–∞)
        text = re.sub(
            r'\b(?:0x[a-fA-F0-9]{40}|[13][a-km-zA-HJ-NP-Z1-9]{25,34}|'
            r'[LM3][a-km-zA-HJ-NP-Z1-9]{26,33}|'
            r'D{1}[5-9A-HJ-NP-U]{1}[1-9A-HJ-NP-Za-km-z]{32}|'
            r'[Xx][0-9A-Za-z]{33}|[A-Za-z0-9]{35,44})\b',
            lambda m: m.group(0)[:4] + '*' * (len(m.group(0)) - 8) + m.group(0)[-4:],
            text
        )

        return text